{"version":3,"sources":["components/Eggs.js","components/AddEgg.js","api.js","App.js","serviceWorker.js","index.js"],"names":["Egg","egg","className","size","src","alt","Eggs","eggs","eggsList","map","key","id","AddEgg","saveEgg","eggSize","useRef","eggType","htmlFor","ref","value","onClick","current","type","url","addEgg","data","a","fetch","method","headers","mode","body","JSON","stringify","response","json","result","console","log","getEggs","App","state","componentWillMount","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAGMA,G,MAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OAAc,yBAAKC,UAAS,cAASD,EAAIE,MAAQC,IAAI,uBAAuBC,IAAI,UAW7EC,EATF,SAAC,GAAkB,IAAD,IAAfC,KACNC,QADqB,MAAR,GAAQ,GACLC,KAAK,SAAAR,GAAG,OAAI,kBAAC,EAAD,CAAKS,IAAKT,EAAIU,GAAIV,IAAKA,OACzD,OACI,yBAAKC,UAAU,aACVM,IC+BEI,G,MAnCA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACRC,EAAUC,iBAAO,MACjBC,EAAUD,iBAAO,MASvB,OACI,yBAAKb,UAAU,YACX,yBAAKA,UAAU,YACX,2BAAOe,QAAQ,YAAf,YACA,4BAAQN,GAAG,WAAWO,IAAKJ,GACvB,4BAAQK,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,WAGR,yBAAKjB,UAAU,YACX,2BAAOe,QAAQ,YAAf,YACA,4BAAQN,GAAG,WAAWO,IAAKF,GACvB,4BAAQG,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,UAGR,4BAAQC,QAxBE,WACd,IAAMnB,EAAM,CACRE,KAAMW,EAAQO,QAAQF,MACtBG,KAAMN,EAAQK,QAAQF,OAE1BN,EAASZ,KAmBL,cCjCNsB,EAAM,6BAENC,EAAM,uCAAG,WAAQC,GAAR,iBAAAC,EAAA,+EAEgBC,MAAOJ,EAAK,CAC/BK,OAAQ,OACRC,QAAS,CACT,eAAgB,oBAEhBC,KAAM,OACNC,KAAMC,KAAKC,UAAUR,KARlB,cAEDS,EAFC,gBAUcA,EAASC,OAVvB,cAUDC,EAVC,OAWPC,QAAQC,IAAI,SAAUF,GAXf,kBAYAA,GAZA,yCAcPC,QAAQC,IAAK,qBAAb,MAdO,6EAAH,sDAoBNC,EAAO,uCAAG,8BAAAb,EAAA,+EAEeC,MAAOJ,EAAK,CAC/BK,OAAQ,MACRC,QAAS,CACT,eAAgB,oBAEhBC,KAAM,SAPF,cAEFI,EAFE,gBASaA,EAASC,OATtB,cASFC,EATE,OAURC,QAAQC,IAAI,SAAUF,GAVd,kBAWDA,GAXC,yCAaRC,QAAQC,IAAK,qBAAb,MAbQ,kBAcD,IAdC,0DAAH,qDCcEE,G,iNA5BbC,MAAQ,CACNlC,KAAM,I,EAERmC,mB,sBAAqB,4BAAAhB,EAAA,sEACAa,IADA,OACbhC,EADa,OAEnB,EAAKoC,SAAS,CACZpC,KAAMA,IAHW,2C,EAOrBM,Q,uCAAU,WAAQZ,GAAR,eAAAyB,EAAA,sEACFF,EAAQvB,GADN,uBAEWsC,IAFX,OAEFhC,EAFE,OAGR,EAAKoC,SAAS,CACZpC,KAAMA,IAJA,2C,8HASR,OACE,yBAAKL,UAAU,OACX,kBAAC,EAAD,CAAMK,KAAMqC,KAAKH,MAAMlC,OACvB,kBAAC,EAAD,CAAQM,QAAS+B,KAAK/B,e,GAvBdgC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.211555f4.chunk.js","sourcesContent":["import React from 'react';\nimport './Eggs.css';\n\nconst Egg = ({ egg } ) => <img className={`egg ${egg.size}`} src=\"/images/egg-icon.png\" alt=\"Egg\" />;\n\nconst Eggs = ({ eggs = []}) => {\n    const eggsList = eggs.map( egg => <Egg key={egg.id} egg={egg} />);\n    return (\n        <div className=\"eggs-list\">\n            {eggsList}\n        </div>\n    );\n}\n\nexport default Eggs;\n","import React, { useRef, useState } from 'react';\nimport './AddEgg.css';\n\n// const Egg = ({ egg } ) => <img className={`egg ${egg.size}`} src=\"/images/egg-icon.png\" alt=\"Egg\" />;\n\nconst AddEgg = ({ saveEgg }) => {\n    const eggSize = useRef(null);\n    const eggType = useRef(null);\n\n    const handleAdd = ( ) => {\n        const egg = {\n            size: eggSize.current.value,\n            type: eggType.current.value\n        }\n        saveEgg( egg );\n    }\n    return (\n        <div className=\"add-eggs\">\n            <div className=\"egg-size\">\n                <label htmlFor=\"egg-size\">Egg Size</label>\n                <select id=\"egg-size\" ref={eggSize}>\n                    <option value=\"small\">Small</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"large\">Large</option>\n                </select>\n            </div>\n            <div className=\"egg-type\">\n                <label htmlFor=\"egg-type\">Egg Size</label>\n                <select id=\"egg-type\" ref={eggType}>\n                    <option value=\"chicken\">Chicken</option>\n                    <option value=\"duck\">Duck</option>\n                </select>\n            </div>\n            <button onClick={handleAdd}>\n                Add Egg\n            </button>\n        </div>\n    );\n}\n\nexport default AddEgg;\n","const url = \"http://localhost:3000/eggs\";\n\nconst addEgg = async ( data ) => {\n    try {\n        const response = await fetch( url, {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            body: JSON.stringify(data) \n        });\n        const result = await response.json();\n        console.log(\"result\", result );\n        return result;\n    } catch (error){\n        console.log( \"There was an error\", error )\n        return;\n    }\n    \n}\n\nconst getEggs = async ( ) => {\n    try {\n        const response = await fetch( url, {\n            method: 'GET',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n        });\n        const result = await response.json();\n        console.log(\"result\", result );\n        return result;\n    } catch (error){\n        console.log( \"There was an error\", error )\n        return [];\n    }\n}\n\nexport {\n    addEgg,\n    getEggs,\n}","import React,{ Component } from \"react\";\nimport Eggs from \"./components/Eggs\";\nimport AddEgg from \"./components/AddEgg\";\nimport { getEggs, addEgg } from \"./api\";\nimport './App.css';\n\nconst url = \"localhost:3000/eggs\";\nclass App extends Component {\n  state = {\n    eggs: []\n  }\n  componentWillMount = async ( ) => {\n    const eggs = await getEggs();\n    this.setState({\n      eggs: eggs\n    })\n  }\n\n  saveEgg = async ( egg ) => {\n    await addEgg( egg );\n    const eggs = await getEggs();\n    this.setState({\n      eggs: eggs\n    })\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n          <Eggs eggs={this.state.eggs} />\n          <AddEgg saveEgg={this.saveEgg} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}